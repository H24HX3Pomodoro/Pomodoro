package processing.test.main;

/* autogenerated by Processing revision 1297 on 2025-04-24 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import cassette.audiofiles.SoundFile;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Main extends PApplet {



Pomodoro p;                  // Objekt af Pomodoro-klassen, styrer timer-logikken
Button startStopButton;     // Knap til at starte og stoppe timeren
StudyTime studyTime;        // Objekt der holder styr på, hvor mange cyklusser der er gået
boolean isRunning = false;  // Boolean der angiver om timeren er aktiv
SoundFile noise;            // Lydfil der afspilles ved aktivitet

public void setup() {
  /* size commented out by preprocessor */;                     // Starter appen i fuld skærm
  textSize(50);                     // Indstiller tekststørrelsen

  p = new Pomodoro();               // Initialiserer Pomodoro-objektet
  startStopButton = new Button(width / 2, height / 2, width * 0.8f); // Placering og størrelse for knappen
  studyTime = new StudyTime();     // Initialiserer studie-tids-trackeren
  noise = new SoundFile(this, "WN.mp3"); // Indlæser lydfil
}

public void draw() {
  background(246, 244, 210);       // Baggrundsfarve

  p.calcTime();                    // Opdaterer timeren
  p.displayTime();                 // Viser nedtælling som tekst
  p.displayCircle();               // Tegner visuel timer-cirkel

  studyTime.update(p.cycle);      // Opdaterer cyklusserne hvis nødvendigt
  startStopButton.display(isRunning); // Tegner knappen
  studyTime.display();             // Viser hvor mange pomodoro der er gået
}

public void mousePressed() {
  if (startStopButton.isClicked(mouseX, mouseY)) {
    isRunning = !isRunning;         // Skifter mellem start og stop
    p.toggleTimer(isRunning);       // Starter eller stopper Pomodoro-timeren
  }
  if (isRunning) {
    noise.loop();                   // Afspiller baggrundslyd under fokus
  } else {
    noise.stop();                   // Stopper lyden når pausen starter
  }
}
class Button {
  float x, y, size;

  Button(float x, float y, float size) {
    this.x = x;
    this.y = y;
    this.size = size;
  }

  public void display(boolean isRunning) {
    fill(164, 74, 63);           // Ydre cirkel farve
    noStroke();
    circle(x, y, size);          // Tegner selve knappen

    fill(212, 224, 155);         // Indre ikon-farve
    noStroke();

    if (!isRunning) {
      // Play-ikon 
      float tSize = size * 0.4f;
      triangle(x - tSize / 2, y - tSize / 2, x - tSize / 2, y + tSize / 2, x + tSize / 2, y);
    } else {
      // Pause-ikon (Ref. til ChatGPT)
      float barW = size * 0.15f;
      float barH = size * 0.5f;
      rect(x - barW * 1.5f, y - barH / 2, barW, barH);
      rect(x + barW * 0.5f, y - barH / 2, barW, barH);
    }
  }

  public boolean isClicked(float mx, float my) {
    return dist(mx, my, x, y) < size / 2;  // Returnerer true hvis trykket inden for knappen
  }
}
class Pomodoro {
  int totalSeconds = 25 * 60;       // Antal sekunder i én pomodoro
  int secondsLeft = totalSeconds;   // Tid tilbage i nuværende session
  int cycle = 3;                    // Antal gennemførte pomodoros
  boolean isBreak = false;          // Om det er pause eller arbejde
  boolean isRunning = false;        // Om timeren er aktiv
  int startTime = 0;                // Hvornår timeren blev startet
  
  public void calcTime() {
    if (isRunning) {
      int elapsedTime = (millis() - startTime) / 1000;     // Tid der er gået i sekunder
      secondsLeft = totalSeconds - elapsedTime;            // Hvor meget tid der er tilbage

      if (secondsLeft <= 0) {                              // Hvis tiden er gået
        if (!isBreak) {
          cycle++;                                         // Øger cyklus hvis det var en arbejdsperiode
          studyTime.update(cycle);
        }
        isBreak = !isBreak;                                // Skifter mellem arbejde og pause
        if (isBreak) {
          totalSeconds = (cycle % 4 == 0) ? 30 * 60 : 5 * 60; // Længere pause efter 4 cyklusser
        } else {
          totalSeconds = 25 * 60;                          // Ellers ny arbejdsperiode
        }

        secondsLeft = totalSeconds;                        // Nulstiller sekunderne
        startTime = millis();                              // Nulstiller starttid
      }
    }
  }

  public void displayTime() {
    int minutes = secondsLeft / 60;
    int seconds = secondsLeft % 60;
    fill(164, 74, 63);
    textAlign(CENTER, CENTER);
    text(minutes + ":" + nf(seconds, 2), width / 2, height / 4); // Viser minutter og sekunder
  }

  public void displayCycle() {
    textSize(40);
    text("Pomodoro: " + cycle, width / 2, height / 6); // Til intern brug: viser antal cyklusser
  }

  public void displayCircle() {
    fill(164, 74, 63);
    noStroke();
    circle(width / 2, height / 2, width * 0.8f); // Tegner visuel timer (stor cirkel)
  }

  public void toggleTimer(boolean state) {
    isRunning = state;
    if (isRunning) {
      startTime = millis() - (totalSeconds - secondsLeft) * 1000; // Justerer starttid hvis pauset
    }
  }
}
class StudyTime {
  int displayedCycles = 0;

  public void update(int pomodoroCycle) {
    displayedCycles = pomodoroCycle;  // Opdaterer antal gennemførte cyklusser
  }

  public void display() {
    int perRow = 4;                        // Hvor mange cirkler per række
    float size = width / 10;              // Størrelsen på hver cirkel
    float spacing = width / (perRow + 1); // Afstand mellem cirkler
    float startY = height - (height - size); // Y-placering

    fill(164, 74, 63);
    noStroke();

    //(Ref. til ChatGPT)
    for (int i = 0; i < displayedCycles; i++) {
      int row = i / perRow;
      int col = i % perRow;
      float x = spacing * (col + 1);
      float y = startY + row * (size + size/2);

      circle(x, y, size);  // Tegner en cirkel for hver gennemført pomodoro
    }
  }
}


  public void settings() { fullScreen(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Main" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
